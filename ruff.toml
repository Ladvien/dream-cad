# Ruff configuration for MVDream project
# https://docs.astral.sh/ruff/

# Same as pyproject.toml settings, but in dedicated file for clarity
line-length = 100
target-version = "py310"

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "extern",  # Exclude external submodules
    "outputs",  # Exclude generated outputs
    "logs",     # Exclude log files
    "benchmarks",  # Exclude benchmark results
]

[lint]
# Enable specific rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking (updated from TCH)
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate (commented out code)
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip without explicit strict parameter
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "SIM108",  # ternary operator (sometimes less readable)
    "SIM114",  # combine if branches
    "SIM117",  # multiple contexts
    "TC001",   # typing-only imports (updated from TCH001)
    "TC002",   # typing-only imports (updated from TCH002)
    "TC003",   # typing-only imports (updated from TCH003)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore import violations in __init__ files
"__init__.py" = ["F401", "F403"]
# Ignore missing docstrings in tests
"test_*.py" = ["D100", "D101", "D102", "D103", "D104"]
# Ignore missing docstrings in migrations
"migrations/*.py" = ["D100", "D101", "D102", "D103", "D104"]

[lint.isort]
known-first-party = ["mvdream"]

[lint.mccabe]
max-complexity = 10

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Unix-style line endings
line-ending = "lf"

# Skip formatting for specific patterns
exclude = [
    "extern/**",
    "*.pyi",
]